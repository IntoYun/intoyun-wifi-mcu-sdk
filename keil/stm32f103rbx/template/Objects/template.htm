<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Objects\template.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Objects\template.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060422: Last Updated: Mon Dec 11 17:22:27 2017
<BR><P>
<H3>Maximum Stack Usage =       2328 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
intoyunInit &rArr; delay &rArr; intoyunLoop &rArr; intoyunDeviceRegister &rArr; ProtocolSetupRegister &rArr; ProtocolParserWaitFinalResp &rArr; ProtocolParserPlatformData &rArr; intoyunParseReceiveDatapoints &rArr; intoyunSendDatapointAll &rArr; intoyunTransmitData &rArr; ProtocolSendPlatformData &rArr;  ProtocolParserWaitFinalResp (Cycle)
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[1c]">ADC1_2_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1c]">ADC1_2_IRQHandler</a><BR>
 <LI><a href="#[4]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4]">BusFault_Handler</a><BR>
 <LI><a href="#[2]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2]">HardFault_Handler</a><BR>
 <LI><a href="#[3]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3]">MemManage_Handler</a><BR>
 <LI><a href="#[5]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5]">UsageFault_Handler</a><BR>
 <LI><a href="#[c7]">ProtocolSendPlatformData</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[b1]">ProtocolParserWaitFinalResp</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[1c]">ADC1_2_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[4]">BusFault_Handler</a> from stm32f1xx_it.o(i.BusFault_Handler) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[1f]">CAN1_RX1_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[20]">CAN1_SCE_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[15]">DMA1_Channel1_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[16]">DMA1_Channel2_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[17]">DMA1_Channel3_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[18]">DMA1_Channel4_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[19]">DMA1_Channel5_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[1a]">DMA1_Channel6_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[1b]">DMA1_Channel7_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[7]">DebugMon_Handler</a> from stm32f1xx_it.o(i.DebugMon_Handler) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[10]">EXTI0_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[32]">EXTI15_10_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[11]">EXTI1_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[12]">EXTI2_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[13]">EXTI3_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[14]">EXTI4_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[21]">EXTI9_5_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[e]">FLASH_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[2]">HardFault_Handler</a> from stm32f1xx_it.o(i.HardFault_Handler) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[2a]">I2C1_ER_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[29]">I2C1_EV_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[2c]">I2C2_ER_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[2b]">I2C2_EV_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[3]">MemManage_Handler</a> from stm32f1xx_it.o(i.MemManage_Handler) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[1]">NMI_Handler</a> from stm32f1xx_it.o(i.NMI_Handler) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[b]">PVD_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[8]">PendSV_Handler</a> from stm32f1xx_it.o(i.PendSV_Handler) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[3c]">ProtocolQueryDeviceCallback</a> from intoyun_protocol.o(i.ProtocolQueryDeviceCallback) referenced from intoyun_protocol.o(i.ProtocolQueryDevice)
 <LI><a href="#[3d]">ProtocolQueryInfoCallback</a> from intoyun_protocol.o(i.ProtocolQueryInfoCallback) referenced from intoyun_protocol.o(i.ProtocolQueryInfo)
 <LI><a href="#[3e]">ProtocolQueryModeCallback</a> from intoyun_protocol.o(i.ProtocolQueryModeCallback) referenced from intoyun_protocol.o(i.ProtocolQueryMode)
 <LI><a href="#[3e]">ProtocolQueryModeCallback</a> from intoyun_protocol.o(i.ProtocolQueryModeCallback) referenced from intoyun_protocol.o(i.ProtocolSetupMode)
 <LI><a href="#[3f]">ProtocolQueryNetTimeCallback</a> from intoyun_protocol.o(i.ProtocolQueryNetTimeCallback) referenced from intoyun_protocol.o(i.ProtocolQueryNetTime)
 <LI><a href="#[40]">ProtocolQueryStatusCallback</a> from intoyun_protocol.o(i.ProtocolQueryStatusCallback) referenced from intoyun_protocol.o(i.ProtocolQueryStatus)
 <LI><a href="#[41]">ProtocolSetupRegisterCallback</a> from intoyun_protocol.o(i.ProtocolSetupRegisterCallback) referenced from intoyun_protocol.o(i.ProtocolSetupRegister)
 <LI><a href="#[f]">RCC_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[33]">RTC_Alarm_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[d]">RTC_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[0]">Reset_Handler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[2d]">SPI1_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[2e]">SPI2_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[6]">SVC_Handler</a> from stm32f1xx_it.o(i.SVC_Handler) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[9]">SysTick_Handler</a> from stm32f1xx_it.o(i.SysTick_Handler) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[36]">SystemInit</a> from system_stm32f1xx.o(i.SystemInit) referenced from startup_stm32f103xb.o(.text)
 <LI><a href="#[c]">TAMPER_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[22]">TIM1_BRK_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[25]">TIM1_CC_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[24]">TIM1_TRG_COM_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[23]">TIM1_UP_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[26]">TIM2_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[27]">TIM3_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[28]">TIM4_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[2f]">USART1_IRQHandler</a> from stm32f1xx_it.o(i.USART1_IRQHandler) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[30]">USART2_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[31]">USART3_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[34]">USBWakeUp_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[1d]">USB_HP_CAN1_TX_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[1e]">USB_LP_CAN1_RX0_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[5]">UsageFault_Handler</a> from stm32f1xx_it.o(i.UsageFault_Handler) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[a]">WWDG_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[37]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_stm32f103xb.o(.text)
 <LI><a href="#[39]">_sbackspace</a> from _sgetc.o(.text) referenced from __0sscanf.o(.text)
 <LI><a href="#[3a]">_scanf_char_input</a> from scanf_char.o(.text) referenced from scanf_char.o(.text)
 <LI><a href="#[38]">_sgetc</a> from _sgetc.o(.text) referenced from __0sscanf.o(.text)
 <LI><a href="#[42]">_snputc</a> from printfa.o(i._snputc) referenced from printfa.o(i.__0snprintf)
 <LI><a href="#[42]">_snputc</a> from printfa.o(i._snputc) referenced from printfa.o(i.__0vsnprintf)
 <LI><a href="#[43]">_sputc</a> from printfa.o(i._sputc) referenced from printfa.o(i.__0sprintf)
 <LI><a href="#[53]">intoyunConnect</a> from intoyun_datapoint.o(i.intoyunConnect) referenced from intoyun_interface.o(.constdata)
 <LI><a href="#[54]">intoyunConnected</a> from intoyun_datapoint.o(i.intoyunConnected) referenced from intoyun_interface.o(.constdata)
 <LI><a href="#[4a]">intoyunDatapointControl</a> from intoyun_datapoint.o(i.intoyunDatapointControl) referenced from intoyun_interface.o(.constdata)
 <LI><a href="#[5b]">intoyunDefineDatapointBinary</a> from intoyun_datapoint.o(i.intoyunDefineDatapointBinary) referenced from intoyun_interface.o(.constdata)
 <LI><a href="#[57]">intoyunDefineDatapointBool</a> from intoyun_datapoint.o(i.intoyunDefineDatapointBool) referenced from intoyun_interface.o(.constdata)
 <LI><a href="#[59]">intoyunDefineDatapointEnum</a> from intoyun_datapoint.o(i.intoyunDefineDatapointEnum) referenced from intoyun_interface.o(.constdata)
 <LI><a href="#[58]">intoyunDefineDatapointNumber</a> from intoyun_datapoint.o(i.intoyunDefineDatapointNumber) referenced from intoyun_interface.o(.constdata)
 <LI><a href="#[5a]">intoyunDefineDatapointString</a> from intoyun_datapoint.o(i.intoyunDefineDatapointString) referenced from intoyun_interface.o(.constdata)
 <LI><a href="#[55]">intoyunDisconnect</a> from intoyun_datapoint.o(i.intoyunDisconnect) referenced from intoyun_interface.o(.constdata)
 <LI><a href="#[56]">intoyunDisconnected</a> from intoyun_datapoint.o(i.intoyunDisconnected) referenced from intoyun_interface.o(.constdata)
 <LI><a href="#[4e]">intoyunExecuteRestart</a> from intoyun_datapoint.o(i.intoyunExecuteRestart) referenced from intoyun_interface.o(.constdata)
 <LI><a href="#[4f]">intoyunExecuteRestore</a> from intoyun_datapoint.o(i.intoyunExecuteRestore) referenced from intoyun_interface.o(.constdata)
 <LI><a href="#[4c]">intoyunGetDevice</a> from intoyun_datapoint.o(i.intoyunGetDevice) referenced from intoyun_interface.o(.constdata)
 <LI><a href="#[4d]">intoyunGetInfo</a> from intoyun_datapoint.o(i.intoyunGetInfo) referenced from intoyun_interface.o(.constdata)
 <LI><a href="#[49]">intoyunGetMode</a> from intoyun_datapoint.o(i.intoyunGetMode) referenced from intoyun_interface.o(.constdata)
 <LI><a href="#[51]">intoyunGetNetTime</a> from intoyun_datapoint.o(i.intoyunGetNetTime) referenced from intoyun_interface.o(.constdata)
 <LI><a href="#[52]">intoyunGetStatus</a> from intoyun_datapoint.o(i.intoyunGetStatus) referenced from intoyun_interface.o(.constdata)
 <LI><a href="#[45]">intoyunInit</a> from intoyun_datapoint.o(i.intoyunInit) referenced from intoyun_interface.o(.constdata)
 <LI><a href="#[46]">intoyunLoop</a> from intoyun_datapoint.o(i.intoyunLoop) referenced from intoyun_interface.o(.constdata)
 <LI><a href="#[50]">intoyunPutPipe</a> from intoyun_datapoint.o(i.intoyunPutPipe) referenced from intoyun_interface.o(.constdata)
 <LI><a href="#[61]">intoyunReadDatapointBinary</a> from intoyun_datapoint.o(i.intoyunReadDatapointBinary) referenced from intoyun_interface.o(.constdata)
 <LI><a href="#[5c]">intoyunReadDatapointBool</a> from intoyun_datapoint.o(i.intoyunReadDatapointBool) referenced from intoyun_interface.o(.constdata)
 <LI><a href="#[5f]">intoyunReadDatapointEnum</a> from intoyun_datapoint.o(i.intoyunReadDatapointEnum) referenced from intoyun_interface.o(.constdata)
 <LI><a href="#[5e]">intoyunReadDatapointNumberDouble</a> from intoyun_datapoint.o(i.intoyunReadDatapointNumberDouble) referenced from intoyun_interface.o(.constdata)
 <LI><a href="#[5d]">intoyunReadDatapointNumberInt32</a> from intoyun_datapoint.o(i.intoyunReadDatapointNumberInt32) referenced from intoyun_interface.o(.constdata)
 <LI><a href="#[60]">intoyunReadDatapointString</a> from intoyun_datapoint.o(i.intoyunReadDatapointString) referenced from intoyun_interface.o(.constdata)
 <LI><a href="#[6e]">intoyunSendAllDatapointManual</a> from intoyun_datapoint.o(i.intoyunSendAllDatapointManual) referenced from intoyun_interface.o(.constdata)
 <LI><a href="#[6f]">intoyunSendCustomData</a> from intoyun_datapoint.o(i.intoyunSendCustomData) referenced from intoyun_interface.o(.constdata)
 <LI><a href="#[6d]">intoyunSendDatapointBinary</a> from intoyun_datapoint.o(i.intoyunSendDatapointBinary) referenced from intoyun_interface.o(.constdata)
 <LI><a href="#[68]">intoyunSendDatapointBool</a> from intoyun_datapoint.o(i.intoyunSendDatapointBool) referenced from intoyun_interface.o(.constdata)
 <LI><a href="#[6b]">intoyunSendDatapointEnum</a> from intoyun_datapoint.o(i.intoyunSendDatapointEnum) referenced from intoyun_interface.o(.constdata)
 <LI><a href="#[6a]">intoyunSendDatapointNumberDouble</a> from intoyun_datapoint.o(i.intoyunSendDatapointNumberDouble) referenced from intoyun_interface.o(.constdata)
 <LI><a href="#[69]">intoyunSendDatapointNumberInt32</a> from intoyun_datapoint.o(i.intoyunSendDatapointNumberInt32) referenced from intoyun_interface.o(.constdata)
 <LI><a href="#[6c]">intoyunSendDatapointString</a> from intoyun_datapoint.o(i.intoyunSendDatapointString) referenced from intoyun_interface.o(.constdata)
 <LI><a href="#[4b]">intoyunSetDevice</a> from intoyun_datapoint.o(i.intoyunSetDevice) referenced from intoyun_interface.o(.constdata)
 <LI><a href="#[47]">intoyunSetEventCallback</a> from intoyun_datapoint.o(i.intoyunSetEventCallback) referenced from intoyun_interface.o(.constdata)
 <LI><a href="#[48]">intoyunSetMode</a> from intoyun_datapoint.o(i.intoyunSetMode) referenced from intoyun_interface.o(.constdata)
 <LI><a href="#[67]">intoyunWriteDatapointBinary</a> from intoyun_datapoint.o(i.intoyunWriteDatapointBinary) referenced from intoyun_interface.o(.constdata)
 <LI><a href="#[62]">intoyunWriteDatapointBool</a> from intoyun_datapoint.o(i.intoyunWriteDatapointBool) referenced from intoyun_interface.o(.constdata)
 <LI><a href="#[65]">intoyunWriteDatapointEnum</a> from intoyun_datapoint.o(i.intoyunWriteDatapointEnum) referenced from intoyun_interface.o(.constdata)
 <LI><a href="#[64]">intoyunWriteDatapointNumberDouble</a> from intoyun_datapoint.o(i.intoyunWriteDatapointNumberDouble) referenced from intoyun_interface.o(.constdata)
 <LI><a href="#[63]">intoyunWriteDatapointNumberInt32</a> from intoyun_datapoint.o(i.intoyunWriteDatapointNumberInt32) referenced from intoyun_interface.o(.constdata)
 <LI><a href="#[66]">intoyunWriteDatapointString</a> from intoyun_datapoint.o(i.intoyunWriteDatapointString) referenced from intoyun_interface.o(.constdata)
 <LI><a href="#[3b]">isspace</a> from isspace_c.o(.text) referenced from scanf_char.o(.text)
 <LI><a href="#[35]">main</a> from main.o(i.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
 <LI><a href="#[44]">system_event_callback</a> from main.o(i.system_event_callback) referenced from main.o(i.userInit)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[37]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(.text)
</UL>
<P><STRONG><a name="[fd]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[70]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[88]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[fe]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[ff]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[100]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[101]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[102]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[0]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>ADC1_2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>CAN1_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>CAN1_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>DMA1_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>DMA1_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>DMA1_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>DMA1_Channel4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>DMA1_Channel5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>DMA1_Channel6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>DMA1_Channel7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>RTC_Alarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>RTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>TAMPER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>TIM1_BRK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>TIM1_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>TIM1_UP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>TIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>TIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>TIM4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>USART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>USART3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>USBWakeUp_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>USB_HP_CAN1_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>USB_LP_CAN1_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[84]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
</UL>

<P><STRONG><a name="[103]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[a8]"></a>__aeabi_memcpy</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intoyunSendCustomData
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intoyunParseReceiveDatapoints
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intoyunFormDataPointBinary
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PipeGet
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MD5Update
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MD5Final
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md5_output
</UL>

<P><STRONG><a name="[104]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[105]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[73]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[106]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[107]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[72]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intoyunParseReceiveDatapoints
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MD5Final
</UL>

<P><STRONG><a name="[a7]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intoyunDeviceRegister
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClockConfig
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProtocolParserWaitFinalResp
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MD5Final
</UL>

<P><STRONG><a name="[108]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[74]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[e1]"></a>strncpy</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, strncpy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strncpy
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intoyunSetDevice
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intoyunGetStatus
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intoyunGetNetTime
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intoyunGetInfo
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intoyunGetDevice
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intoyunDefineDatapointString
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intoyunPlatformWriteDatapointString
</UL>

<P><STRONG><a name="[c0]"></a>strchr</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, strchr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProtocolParserWaitFinalResp
</UL>

<P><STRONG><a name="[e0]"></a>strlen</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, strlen.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intoyunReadDatapointString
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intoyunDefineDatapointString
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intoyunPlatformWriteDatapointString
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intoyunFormDataPointBinary
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intoyunDeviceRegister
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md5_output
</UL>

<P><STRONG><a name="[f2]"></a>strcmp</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, strcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intoyunPlatformWriteDatapointString
</UL>

<P><STRONG><a name="[f0]"></a>memcmp</STRONG> (Thumb, 26 bytes, Stack size 12 bytes, memcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intoyunPlatformWriteDatapointBinary
</UL>

<P><STRONG><a name="[75]"></a>__0sscanf</STRONG> (Thumb, 48 bytes, Stack size 72 bytes, __0sscanf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_string
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf_char
</UL>
<BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProtocolSetupRegisterCallback
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProtocolQueryStatusCallback
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProtocolQueryNetTimeCallback
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProtocolQueryModeCallback
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProtocolQueryInfoCallback
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProtocolQueryDeviceCallback
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProtocolParserWaitFinalResp
</UL>

<P><STRONG><a name="[77]"></a>_scanf_int</STRONG> (Thumb, 332 bytes, Stack size 56 bytes, _scanf_int.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _scanf_int
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_chval
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf
</UL>

<P><STRONG><a name="[8a]"></a>_scanf_string</STRONG> (Thumb, 224 bytes, Stack size 56 bytes, _scanf_str.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _scanf_string
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf
</UL>

<P><STRONG><a name="[79]"></a>__aeabi_dadd</STRONG> (Thumb, 322 bytes, Stack size 48 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intoyunParseReceiveDatapoints
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[7e]"></a>__aeabi_dsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intoyunFormDataPointBinary
</UL>

<P><STRONG><a name="[7f]"></a>__aeabi_drsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[80]"></a>__aeabi_dmul</STRONG> (Thumb, 228 bytes, Stack size 48 bytes, dmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intoyunPlatformWriteDatapointNumberDouble
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intoyunFormDataPointBinary
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pow
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[81]"></a>__aeabi_ddiv</STRONG> (Thumb, 222 bytes, Stack size 32 bytes, ddiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intoyunParseReceiveDatapoints
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intoyunPlatformWriteDatapointNumberDouble
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[82]"></a>__aeabi_i2d</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, dflti.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __aeabi_i2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intoyunParseReceiveDatapoints
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intoyunPlatformWriteDatapointNumberInt32
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intoyunPlatformWriteDatapointNumberDouble
</UL>

<P><STRONG><a name="[83]"></a>__aeabi_d2iz</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, dfixi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_d2iz
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intoyunParseReceiveDatapoints
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intoyunDefineDatapointNumber
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intoyunPlatformWriteDatapointNumberInt32
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intoyunPlatformWriteDatapointNumberDouble
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intoyunFormDataPointBinary
</UL>

<P><STRONG><a name="[f1]"></a>__aeabi_cdcmpeq</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, cdcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intoyunPlatformWriteDatapointNumberDouble
</UL>

<P><STRONG><a name="[df]"></a>__aeabi_cdcmple</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, cdcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intoyunDefineDatapointNumber
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intoyunPlatformWriteDatapointNumberInt32
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intoyunPlatformWriteDatapointNumberDouble
</UL>

<P><STRONG><a name="[d4]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, cdrcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intoyunDefineDatapointNumber
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intoyunPlatformWriteDatapointNumberInt32
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intoyunPlatformWriteDatapointNumberDouble
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[109]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)

<P><STRONG><a name="[db]"></a>__aeabi_uidivmod</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[85]"></a>__aeabi_uldivmod</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, uldiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[7a]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
</UL>

<P><STRONG><a name="[10a]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[7b]"></a>__aeabi_lasr</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, llsshr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[10b]"></a>_ll_sshift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)

<P><STRONG><a name="[78]"></a>_chval</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, _chval.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_int
</UL>

<P><STRONG><a name="[76]"></a>__vfscanf_char</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, scanf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = __vfscanf_char &rArr; __vfscanf &rArr; _scanf_string
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sscanf
</UL>

<P><STRONG><a name="[38]"></a>_sgetc</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, _sgetc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> __0sscanf.o(.text)
</UL>
<P><STRONG><a name="[39]"></a>_sbackspace</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, _sgetc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> __0sscanf.o(.text)
</UL>
<P><STRONG><a name="[10c]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[7d]"></a>_double_round</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[7c]"></a>_double_epilogue</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[87]"></a>__aeabi_d2ulz</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, dfixul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[71]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[10d]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[3b]"></a>isspace</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, isspace_c.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ctype_lookup
</UL>
<BR>[Address Reference Count : 1]<UL><LI> scanf_char.o(.text)
</UL>
<P><STRONG><a name="[86]"></a>__vfscanf</STRONG> (Thumb, 808 bytes, Stack size 88 bytes, _scanf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = __vfscanf &rArr; _scanf_string
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_string
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_int
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf_char
</UL>

<P><STRONG><a name="[89]"></a>__ctype_lookup</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, ctype_c.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isspace
</UL>

<P><STRONG><a name="[4]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f1xx_it.o(i.BusFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f1xx_it.o(i.DebugMon_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[8b]"></a>HAL_Delay</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, stm32f1xx_hal.o(i.HAL_Delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
</UL>

<P><STRONG><a name="[a0]"></a>HAL_GPIO_Init</STRONG> (Thumb, 408 bytes, Stack size 40 bytes, stm32f1xx_hal_gpio.o(i.HAL_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
</UL>

<P><STRONG><a name="[8c]"></a>HAL_GetTick</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f1xx_hal.o(i.HAL_GetTick))
<BR><BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Millis
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WaitOnFlagUntilTimeout
</UL>

<P><STRONG><a name="[cc]"></a>HAL_IncTick</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f1xx_hal.o(i.HAL_IncTick))
<BR><BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[8d]"></a>HAL_Init</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, stm32f1xx_hal.o(i.HAL_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_Init &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriorityGrouping
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SystemInit
</UL>

<P><STRONG><a name="[8f]"></a>HAL_InitTick</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, stm32f1xx_hal.o(i.HAL_InitTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_InitTick &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Config
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[94]"></a>HAL_Millis</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, hal_interface.o(i.HAL_Millis))
<BR><BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timerIsEnd
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timerGetId
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;millis
</UL>

<P><STRONG><a name="[90]"></a>HAL_MspInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f1xx_hal_msp_template.o(i.HAL_MspInit))
<BR><BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[a1]"></a>HAL_NVIC_EnableIRQ</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f1xx_hal_cortex.o(i.HAL_NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
</UL>

<P><STRONG><a name="[93]"></a>HAL_NVIC_SetPriority</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, stm32f1xx_hal_cortex.o(i.HAL_NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[8e]"></a>HAL_NVIC_SetPriorityGrouping</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f1xx_hal_cortex.o(i.HAL_NVIC_SetPriorityGrouping))
<BR><BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[96]"></a>HAL_Print</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, hal_interface.o(i.HAL_Print))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = HAL_Print &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_log_print_dump
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_log_print
</UL>

<P><STRONG><a name="[98]"></a>HAL_RCC_ClockConfig</STRONG> (Thumb, 374 bytes, Stack size 32 bytes, stm32f1xx_hal_rcc.o(i.HAL_RCC_ClockConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = HAL_RCC_ClockConfig &rArr; HAL_RCC_GetSysClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClockConfig
</UL>

<P><STRONG><a name="[91]"></a>HAL_RCC_GetHCLKFreq</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f1xx_hal_rcc.o(i.HAL_RCC_GetHCLKFreq))
<BR><BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[ce]"></a>HAL_RCC_GetPCLK1Freq</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32f1xx_hal_rcc.o(i.HAL_RCC_GetPCLK1Freq))
<BR><BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[cd]"></a>HAL_RCC_GetPCLK2Freq</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32f1xx_hal_rcc.o(i.HAL_RCC_GetPCLK2Freq))
<BR><BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[99]"></a>HAL_RCC_GetSysClockFreq</STRONG> (Thumb, 102 bytes, Stack size 28 bytes, stm32f1xx_hal_rcc.o(i.HAL_RCC_GetSysClockFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = HAL_RCC_GetSysClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
</UL>

<P><STRONG><a name="[9a]"></a>HAL_RCC_OscConfig</STRONG> (Thumb, 1406 bytes, Stack size 40 bytes, stm32f1xx_hal_rcc.o(i.HAL_RCC_OscConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HAL_RCC_OscConfig &rArr; HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClockConfig
</UL>

<P><STRONG><a name="[92]"></a>HAL_SYSTICK_Config</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, stm32f1xx_hal_cortex.o(i.HAL_SYSTICK_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_SYSTICK_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[9b]"></a>HAL_SystemInit</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, hal_interface.o(i.HAL_SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = HAL_SystemInit &rArr; SystemClockConfig &rArr; HAL_RCC_ClockConfig &rArr; HAL_RCC_GetSysClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClockConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intoyunInit
</UL>

<P><STRONG><a name="[9d]"></a>HAL_UART_Init</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, stm32f1xx_hal_uart.o(i.HAL_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SystemInit
</UL>

<P><STRONG><a name="[9e]"></a>HAL_UART_MspInit</STRONG> (Thumb, 168 bytes, Stack size 40 bytes, hal_interface.o(i.HAL_UART_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = HAL_UART_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[a2]"></a>HAL_UART_Receive</STRONG> (Thumb, 204 bytes, Stack size 32 bytes, stm32f1xx_hal_uart.o(i.HAL_UART_Receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = HAL_UART_Receive &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[97]"></a>HAL_UART_Transmit</STRONG> (Thumb, 204 bytes, Stack size 32 bytes, stm32f1xx_hal_uart.o(i.HAL_UART_Transmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UartWrite
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Print
</UL>

<P><STRONG><a name="[a4]"></a>HAL_UartWrite</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hal_interface.o(i.HAL_UartWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = HAL_UartWrite &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SerialPipePut
</UL>

<P><STRONG><a name="[2]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f1xx_it.o(i.HardFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[a5]"></a>MD5Final</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, intoyun_md5.o(i.MD5Final))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = MD5Final &rArr; MD5Transform
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MD5Transform
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md5_calculate
</UL>

<P><STRONG><a name="[fb]"></a>MD5Init</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, intoyun_md5.o(i.MD5Init))
<BR><BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md5_begin
</UL>

<P><STRONG><a name="[a9]"></a>MD5Update</STRONG> (Thumb, 126 bytes, Stack size 24 bytes, intoyun_md5.o(i.MD5Update))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = MD5Update &rArr; MD5Transform
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MD5Transform
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md5_add
</UL>

<P><STRONG><a name="[3]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f1xx_it.o(i.MemManage_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[1]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f1xx_it.o(i.NMI_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f1xx_it.o(i.PendSV_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[af]"></a>ProtocolExecuteRestart</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, intoyun_protocol.o(i.ProtocolExecuteRestart))
<BR><BR>[Stack]<UL><LI>Max Depth = 1912<LI>Call Chain = ProtocolExecuteRestart &rArr; ProtocolParserWaitFinalResp &rArr; ProtocolParserPlatformData &rArr; intoyunParseReceiveDatapoints &rArr; intoyunSendDatapointAll &rArr; intoyunTransmitData &rArr; ProtocolSendPlatformData &rArr;  ProtocolParserWaitFinalResp (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProtocolParserWaitFinalResp
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProtocolParserSendFormated
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intoyunExecuteRestart
</UL>

<P><STRONG><a name="[b2]"></a>ProtocolExecuteRestore</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, intoyun_protocol.o(i.ProtocolExecuteRestore))
<BR><BR>[Stack]<UL><LI>Max Depth = 1912<LI>Call Chain = ProtocolExecuteRestore &rArr; ProtocolParserWaitFinalResp &rArr; ProtocolParserPlatformData &rArr; intoyunParseReceiveDatapoints &rArr; intoyunSendDatapointAll &rArr; intoyunTransmitData &rArr; ProtocolSendPlatformData &rArr;  ProtocolParserWaitFinalResp (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProtocolParserWaitFinalResp
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProtocolParserSendFormated
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intoyunExecuteRestore
</UL>

<P><STRONG><a name="[b3]"></a>ProtocolModuleActiveSendHandle</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, intoyun_protocol.o(i.ProtocolModuleActiveSendHandle))
<BR><BR>[Stack]<UL><LI>Max Depth = 1904<LI>Call Chain = ProtocolModuleActiveSendHandle &rArr; ProtocolParserWaitFinalResp &rArr; ProtocolParserPlatformData &rArr; intoyunParseReceiveDatapoints &rArr; intoyunSendDatapointAll &rArr; intoyunTransmitData &rArr; ProtocolSendPlatformData &rArr;  ProtocolParserWaitFinalResp (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProtocolParserWaitFinalResp
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intoyunLoop
</UL>

<P><STRONG><a name="[b8]"></a>ProtocolParserInit</STRONG> (Thumb, 148 bytes, Stack size 40 bytes, intoyun_protocol.o(i.ProtocolParserInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 1944<LI>Call Chain = ProtocolParserInit &rArr; ProtocolParserWaitFinalResp &rArr; ProtocolParserPlatformData &rArr; intoyunParseReceiveDatapoints &rArr; intoyunSendDatapointAll &rArr; intoyunTransmitData &rArr; ProtocolSendPlatformData &rArr;  ProtocolParserWaitFinalResp (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProtocolParserWaitFinalResp
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProtocolParserSendFormated
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_log_print
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intoyunInit
</UL>

<P><STRONG><a name="[bb]"></a>ProtocolParserPlatformData</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, intoyun_protocol.o(i.ProtocolParserPlatformData))
<BR><BR>[Stack]<UL><LI>Max Depth = 1240<LI>Call Chain = ProtocolParserPlatformData &rArr; intoyunParseReceiveDatapoints &rArr; intoyunSendDatapointAll &rArr; intoyunTransmitData &rArr; ProtocolSendPlatformData &rArr;  ProtocolParserWaitFinalResp (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intoyunParseReceiveDatapoints
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProtocolParserWaitFinalResp
</UL>

<P><STRONG><a name="[c1]"></a>ProtocolPutPipe</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, intoyun_protocol.o(i.ProtocolPutPipe))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ProtocolPutPipe
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PipeInc
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PipeFree
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intoyunPutPipe
</UL>

<P><STRONG><a name="[c2]"></a>ProtocolQueryDevice</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, intoyun_protocol.o(i.ProtocolQueryDevice))
<BR><BR>[Stack]<UL><LI>Max Depth = 1912<LI>Call Chain = ProtocolQueryDevice &rArr; ProtocolParserWaitFinalResp &rArr; ProtocolParserPlatformData &rArr; intoyunParseReceiveDatapoints &rArr; intoyunSendDatapointAll &rArr; intoyunTransmitData &rArr; ProtocolSendPlatformData &rArr;  ProtocolParserWaitFinalResp (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProtocolParserWaitFinalResp
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProtocolParserSendFormated
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intoyunGetDevice
</UL>

<P><STRONG><a name="[3c]"></a>ProtocolQueryDeviceCallback</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, intoyun_protocol.o(i.ProtocolQueryDeviceCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = ProtocolQueryDeviceCallback &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_string
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sscanf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> intoyun_protocol.o(i.ProtocolQueryDevice)
</UL>
<P><STRONG><a name="[c3]"></a>ProtocolQueryInfo</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, intoyun_protocol.o(i.ProtocolQueryInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 1912<LI>Call Chain = ProtocolQueryInfo &rArr; ProtocolParserWaitFinalResp &rArr; ProtocolParserPlatformData &rArr; intoyunParseReceiveDatapoints &rArr; intoyunSendDatapointAll &rArr; intoyunTransmitData &rArr; ProtocolSendPlatformData &rArr;  ProtocolParserWaitFinalResp (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProtocolParserWaitFinalResp
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProtocolParserSendFormated
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intoyunInit
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intoyunGetInfo
</UL>

<P><STRONG><a name="[3d]"></a>ProtocolQueryInfoCallback</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, intoyun_protocol.o(i.ProtocolQueryInfoCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = ProtocolQueryInfoCallback &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_string
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sscanf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> intoyun_protocol.o(i.ProtocolQueryInfo)
</UL>
<P><STRONG><a name="[c4]"></a>ProtocolQueryMode</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, intoyun_protocol.o(i.ProtocolQueryMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 1912<LI>Call Chain = ProtocolQueryMode &rArr; ProtocolParserWaitFinalResp &rArr; ProtocolParserPlatformData &rArr; intoyunParseReceiveDatapoints &rArr; intoyunSendDatapointAll &rArr; intoyunTransmitData &rArr; ProtocolSendPlatformData &rArr;  ProtocolParserWaitFinalResp (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProtocolParserWaitFinalResp
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProtocolParserSendFormated
</UL>
<BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intoyunGetMode
</UL>

<P><STRONG><a name="[3e]"></a>ProtocolQueryModeCallback</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, intoyun_protocol.o(i.ProtocolQueryModeCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = ProtocolQueryModeCallback &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_string
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sscanf
</UL>
<BR>[Address Reference Count : 2]<UL><LI> intoyun_protocol.o(i.ProtocolQueryMode)
<LI> intoyun_protocol.o(i.ProtocolSetupMode)
</UL>
<P><STRONG><a name="[c5]"></a>ProtocolQueryNetTime</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, intoyun_protocol.o(i.ProtocolQueryNetTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 1912<LI>Call Chain = ProtocolQueryNetTime &rArr; ProtocolParserWaitFinalResp &rArr; ProtocolParserPlatformData &rArr; intoyunParseReceiveDatapoints &rArr; intoyunSendDatapointAll &rArr; intoyunTransmitData &rArr; ProtocolSendPlatformData &rArr;  ProtocolParserWaitFinalResp (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProtocolParserWaitFinalResp
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProtocolParserSendFormated
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intoyunGetNetTime
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intoyunDeviceRegister
</UL>

<P><STRONG><a name="[3f]"></a>ProtocolQueryNetTimeCallback</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, intoyun_protocol.o(i.ProtocolQueryNetTimeCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = ProtocolQueryNetTimeCallback &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_string
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sscanf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> intoyun_protocol.o(i.ProtocolQueryNetTime)
</UL>
<P><STRONG><a name="[c6]"></a>ProtocolQueryStatus</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, intoyun_protocol.o(i.ProtocolQueryStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 1912<LI>Call Chain = ProtocolQueryStatus &rArr; ProtocolParserWaitFinalResp &rArr; ProtocolParserPlatformData &rArr; intoyunParseReceiveDatapoints &rArr; intoyunSendDatapointAll &rArr; intoyunTransmitData &rArr; ProtocolSendPlatformData &rArr;  ProtocolParserWaitFinalResp (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProtocolParserWaitFinalResp
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProtocolParserSendFormated
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intoyunGetStatus
</UL>

<P><STRONG><a name="[40]"></a>ProtocolQueryStatusCallback</STRONG> (Thumb, 104 bytes, Stack size 48 bytes, intoyun_protocol.o(i.ProtocolQueryStatusCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = ProtocolQueryStatusCallback &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_string
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sscanf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> intoyun_protocol.o(i.ProtocolQueryStatus)
</UL>
<P><STRONG><a name="[c7]"></a>ProtocolSendPlatformData</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, intoyun_protocol.o(i.ProtocolSendPlatformData))
<BR><BR>[Stack]<UL><LI>Max Depth = 640 + In Cycle
<LI>Call Chain = ProtocolSendPlatformData &rArr;  ProtocolParserWaitFinalResp (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SerialPipePut
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProtocolParserWaitFinalResp
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProtocolParserSendFormated
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intoyunTransmitData
</UL>

<P><STRONG><a name="[c8]"></a>ProtocolSetupDevice</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, intoyun_protocol.o(i.ProtocolSetupDevice))
<BR><BR>[Stack]<UL><LI>Max Depth = 1912<LI>Call Chain = ProtocolSetupDevice &rArr; ProtocolParserWaitFinalResp &rArr; ProtocolParserPlatformData &rArr; intoyunParseReceiveDatapoints &rArr; intoyunSendDatapointAll &rArr; intoyunTransmitData &rArr; ProtocolSendPlatformData &rArr;  ProtocolParserWaitFinalResp (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProtocolParserWaitFinalResp
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProtocolParserSendFormated
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intoyunSetDevice
</UL>

<P><STRONG><a name="[c9]"></a>ProtocolSetupJoin</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, intoyun_protocol.o(i.ProtocolSetupJoin))
<BR><BR>[Stack]<UL><LI>Max Depth = 1912<LI>Call Chain = ProtocolSetupJoin &rArr; ProtocolParserWaitFinalResp &rArr; ProtocolParserPlatformData &rArr; intoyunParseReceiveDatapoints &rArr; intoyunSendDatapointAll &rArr; intoyunTransmitData &rArr; ProtocolSendPlatformData &rArr;  ProtocolParserWaitFinalResp (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProtocolParserWaitFinalResp
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProtocolParserSendFormated
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intoyunDisconnect
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intoyunConnect
</UL>

<P><STRONG><a name="[ca]"></a>ProtocolSetupMode</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, intoyun_protocol.o(i.ProtocolSetupMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 1912<LI>Call Chain = ProtocolSetupMode &rArr; ProtocolParserWaitFinalResp &rArr; ProtocolParserPlatformData &rArr; intoyunParseReceiveDatapoints &rArr; intoyunSendDatapointAll &rArr; intoyunTransmitData &rArr; ProtocolSendPlatformData &rArr;  ProtocolParserWaitFinalResp (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProtocolParserWaitFinalResp
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProtocolParserSendFormated
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_log_print
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intoyunSetMode
</UL>

<P><STRONG><a name="[cb]"></a>ProtocolSetupRegister</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, intoyun_protocol.o(i.ProtocolSetupRegister))
<BR><BR>[Stack]<UL><LI>Max Depth = 1912<LI>Call Chain = ProtocolSetupRegister &rArr; ProtocolParserWaitFinalResp &rArr; ProtocolParserPlatformData &rArr; intoyunParseReceiveDatapoints &rArr; intoyunSendDatapointAll &rArr; intoyunTransmitData &rArr; ProtocolSendPlatformData &rArr;  ProtocolParserWaitFinalResp (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProtocolParserWaitFinalResp
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProtocolParserSendFormated
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intoyunDeviceRegister
</UL>

<P><STRONG><a name="[41]"></a>ProtocolSetupRegisterCallback</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, intoyun_protocol.o(i.ProtocolSetupRegisterCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = ProtocolSetupRegisterCallback &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_string
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sscanf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> intoyun_protocol.o(i.ProtocolSetupRegister)
</UL>
<P><STRONG><a name="[6]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f1xx_it.o(i.SVC_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>SysTick_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f1xx_it.o(i.SysTick_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_IncTick
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>SystemInit</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, system_stm32f1xx.o(i.SystemInit))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(.text)
</UL>
<P><STRONG><a name="[2f]"></a>USART1_IRQHandler</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, stm32f1xx_it.o(i.USART1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = USART1_IRQHandler &rArr; HAL_UART_Receive &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Receive
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[5]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f1xx_it.o(i.UsageFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[cf]"></a>__0snprintf</STRONG> (Thumb, 44 bytes, Stack size 32 bytes, printfa.o(i.__0snprintf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[10e]"></a>__1snprintf</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, printfa.o(i.__0snprintf), UNUSED)

<P><STRONG><a name="[d5]"></a>__2snprintf</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, printfa.o(i.__0snprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_log_print
</UL>

<P><STRONG><a name="[10f]"></a>__c89snprintf</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, printfa.o(i.__0snprintf), UNUSED)

<P><STRONG><a name="[110]"></a>snprintf</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, printfa.o(i.__0snprintf), UNUSED)

<P><STRONG><a name="[d1]"></a>__0sprintf</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[111]"></a>__1sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[d7]"></a>__2sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intoyunDeviceRegister
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md5_output
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_log_print_dump
</UL>

<P><STRONG><a name="[112]"></a>__c89sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[113]"></a>sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[d2]"></a>__0vsnprintf</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, printfa.o(i.__0vsnprintf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[114]"></a>__1vsnprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsnprintf), UNUSED)

<P><STRONG><a name="[115]"></a>__2vsnprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsnprintf), UNUSED)

<P><STRONG><a name="[116]"></a>__c89vsnprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsnprintf), UNUSED)

<P><STRONG><a name="[bd]"></a>vsnprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsnprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = vsnprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProtocolParserSendFormated
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_log_print
</UL>

<P><STRONG><a name="[117]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[118]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[119]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[ba]"></a>_log_print</STRONG> (Thumb, 82 bytes, Stack size 544 bytes, intoyun_log.o(i._log_print))
<BR><BR>[Stack]<UL><LI>Max Depth = 632<LI>Call Chain = _log_print &rArr; HAL_Print &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Print
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;millis
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsnprintf
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intoyunSetDevice
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intoyunParseReceiveDatapoints
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intoyunInit
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intoyunGetStatus
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intoyunGetInfo
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intoyunGetDevice
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intoyunSendDatapointAll
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intoyunPlatformWriteDatapointString
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intoyunDeviceRegister
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProtocolParserWaitFinalResp
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md5_output
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProtocolSetupMode
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProtocolParserInit
</UL>

<P><STRONG><a name="[d6]"></a>_log_print_dump</STRONG> (Thumb, 68 bytes, Stack size 32 bytes, intoyun_log.o(i._log_print_dump))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = _log_print_dump &rArr; HAL_Print &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Print
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intoyunParseReceiveDatapoints
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intoyunSendDatapointAll
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md5_output
</UL>

<P><STRONG><a name="[dc]"></a>delay</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, intoyun_interface.o(i.delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 2104<LI>Call Chain = delay &rArr; intoyunLoop &rArr; intoyunDeviceRegister &rArr; ProtocolSetupRegister &rArr; ProtocolParserWaitFinalResp &rArr; ProtocolParserPlatformData &rArr; intoyunParseReceiveDatapoints &rArr; intoyunSendDatapointAll &rArr; intoyunTransmitData &rArr; ProtocolSendPlatformData &rArr;  ProtocolParserWaitFinalResp (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intoyunLoop
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Millis
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intoyunInit
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;userInit
</UL>

<P><STRONG><a name="[ed]"></a>free</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, malloc.o(i.free))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = free
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intoyunParseReceiveDatapoints
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intoyunPlatformWriteDatapointString
</UL>

<P><STRONG><a name="[53]"></a>intoyunConnect</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, intoyun_datapoint.o(i.intoyunConnect))
<BR><BR>[Stack]<UL><LI>Max Depth = 1912<LI>Call Chain = intoyunConnect &rArr; ProtocolSetupJoin &rArr; ProtocolParserWaitFinalResp &rArr; ProtocolParserPlatformData &rArr; intoyunParseReceiveDatapoints &rArr; intoyunSendDatapointAll &rArr; intoyunTransmitData &rArr; ProtocolSendPlatformData &rArr;  ProtocolParserWaitFinalResp (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProtocolSetupJoin
</UL>
<BR>[Address Reference Count : 1]<UL><LI> intoyun_interface.o(.constdata)
</UL>
<P><STRONG><a name="[54]"></a>intoyunConnected</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, intoyun_datapoint.o(i.intoyunConnected))
<BR><BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intoyunLoop
</UL>
<BR>[Address Reference Count : 1]<UL><LI> intoyun_interface.o(.constdata)
</UL>
<P><STRONG><a name="[4a]"></a>intoyunDatapointControl</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, intoyun_datapoint.o(i.intoyunDatapointControl))
<BR>[Address Reference Count : 1]<UL><LI> intoyun_interface.o(.constdata)
</UL>
<P><STRONG><a name="[5b]"></a>intoyunDefineDatapointBinary</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, intoyun_datapoint.o(i.intoyunDefineDatapointBinary))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = intoyunDefineDatapointBinary &rArr; intoyunDatapointValueInit &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intoyunDiscoverProperty
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intoyunDatapointValueInit
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> intoyun_interface.o(.constdata)
</UL>
<P><STRONG><a name="[57]"></a>intoyunDefineDatapointBool</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, intoyun_datapoint.o(i.intoyunDefineDatapointBool))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = intoyunDefineDatapointBool &rArr; intoyunDatapointValueInit &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intoyunDiscoverProperty
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intoyunDatapointValueInit
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intoyunInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> intoyun_interface.o(.constdata)
</UL>
<P><STRONG><a name="[59]"></a>intoyunDefineDatapointEnum</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, intoyun_datapoint.o(i.intoyunDefineDatapointEnum))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = intoyunDefineDatapointEnum &rArr; intoyunDatapointValueInit &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intoyunDiscoverProperty
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intoyunDatapointValueInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> intoyun_interface.o(.constdata)
</UL>
<P><STRONG><a name="[58]"></a>intoyunDefineDatapointNumber</STRONG> (Thumb, 138 bytes, Stack size 56 bytes, intoyun_datapoint.o(i.intoyunDefineDatapointNumber))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = intoyunDefineDatapointNumber &rArr; intoyunDatapointValueInit &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intoyunDiscoverProperty
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intoyunDatapointValueInit
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
</UL>
<BR>[Address Reference Count : 1]<UL><LI> intoyun_interface.o(.constdata)
</UL>
<P><STRONG><a name="[5a]"></a>intoyunDefineDatapointString</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, intoyun_datapoint.o(i.intoyunDefineDatapointString))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = intoyunDefineDatapointString &rArr; intoyunDatapointValueInit &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intoyunDiscoverProperty
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intoyunDatapointValueInit
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> intoyun_interface.o(.constdata)
</UL>
<P><STRONG><a name="[55]"></a>intoyunDisconnect</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, intoyun_datapoint.o(i.intoyunDisconnect))
<BR><BR>[Stack]<UL><LI>Max Depth = 1912<LI>Call Chain = intoyunDisconnect &rArr; ProtocolSetupJoin &rArr; ProtocolParserWaitFinalResp &rArr; ProtocolParserPlatformData &rArr; intoyunParseReceiveDatapoints &rArr; intoyunSendDatapointAll &rArr; intoyunTransmitData &rArr; ProtocolSendPlatformData &rArr;  ProtocolParserWaitFinalResp (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProtocolSetupJoin
</UL>
<BR>[Address Reference Count : 1]<UL><LI> intoyun_interface.o(.constdata)
</UL>
<P><STRONG><a name="[56]"></a>intoyunDisconnected</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, intoyun_datapoint.o(i.intoyunDisconnected))
<BR>[Address Reference Count : 1]<UL><LI> intoyun_interface.o(.constdata)
</UL>
<P><STRONG><a name="[4e]"></a>intoyunExecuteRestart</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, intoyun_datapoint.o(i.intoyunExecuteRestart))
<BR><BR>[Stack]<UL><LI>Max Depth = 1912<LI>Call Chain = intoyunExecuteRestart &rArr; ProtocolExecuteRestart &rArr; ProtocolParserWaitFinalResp &rArr; ProtocolParserPlatformData &rArr; intoyunParseReceiveDatapoints &rArr; intoyunSendDatapointAll &rArr; intoyunTransmitData &rArr; ProtocolSendPlatformData &rArr;  ProtocolParserWaitFinalResp (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProtocolExecuteRestart
</UL>
<BR>[Address Reference Count : 1]<UL><LI> intoyun_interface.o(.constdata)
</UL>
<P><STRONG><a name="[4f]"></a>intoyunExecuteRestore</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, intoyun_datapoint.o(i.intoyunExecuteRestore))
<BR><BR>[Stack]<UL><LI>Max Depth = 1912<LI>Call Chain = intoyunExecuteRestore &rArr; ProtocolExecuteRestore &rArr; ProtocolParserWaitFinalResp &rArr; ProtocolParserPlatformData &rArr; intoyunParseReceiveDatapoints &rArr; intoyunSendDatapointAll &rArr; intoyunTransmitData &rArr; ProtocolSendPlatformData &rArr;  ProtocolParserWaitFinalResp (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProtocolExecuteRestore
</UL>
<BR>[Address Reference Count : 1]<UL><LI> intoyun_interface.o(.constdata)
</UL>
<P><STRONG><a name="[4c]"></a>intoyunGetDevice</STRONG> (Thumb, 100 bytes, Stack size 240 bytes, intoyun_datapoint.o(i.intoyunGetDevice))
<BR><BR>[Stack]<UL><LI>Max Depth = 2152<LI>Call Chain = intoyunGetDevice &rArr; ProtocolQueryDevice &rArr; ProtocolParserWaitFinalResp &rArr; ProtocolParserPlatformData &rArr; intoyunParseReceiveDatapoints &rArr; intoyunSendDatapointAll &rArr; intoyunTransmitData &rArr; ProtocolSendPlatformData &rArr;  ProtocolParserWaitFinalResp (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_log_print
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProtocolQueryDevice
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> intoyun_interface.o(.constdata)
</UL>
<P><STRONG><a name="[4d]"></a>intoyunGetInfo</STRONG> (Thumb, 106 bytes, Stack size 240 bytes, intoyun_datapoint.o(i.intoyunGetInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 2152<LI>Call Chain = intoyunGetInfo &rArr; ProtocolQueryInfo &rArr; ProtocolParserWaitFinalResp &rArr; ProtocolParserPlatformData &rArr; intoyunParseReceiveDatapoints &rArr; intoyunSendDatapointAll &rArr; intoyunTransmitData &rArr; ProtocolSendPlatformData &rArr;  ProtocolParserWaitFinalResp (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_log_print
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProtocolQueryInfo
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> intoyun_interface.o(.constdata)
</UL>
<P><STRONG><a name="[49]"></a>intoyunGetMode</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, intoyun_datapoint.o(i.intoyunGetMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 1920<LI>Call Chain = intoyunGetMode &rArr; ProtocolQueryMode &rArr; ProtocolParserWaitFinalResp &rArr; ProtocolParserPlatformData &rArr; intoyunParseReceiveDatapoints &rArr; intoyunSendDatapointAll &rArr; intoyunTransmitData &rArr; ProtocolSendPlatformData &rArr;  ProtocolParserWaitFinalResp (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProtocolQueryMode
</UL>
<BR>[Address Reference Count : 1]<UL><LI> intoyun_interface.o(.constdata)
</UL>
<P><STRONG><a name="[51]"></a>intoyunGetNetTime</STRONG> (Thumb, 60 bytes, Stack size 64 bytes, intoyun_datapoint.o(i.intoyunGetNetTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 1976<LI>Call Chain = intoyunGetNetTime &rArr; ProtocolQueryNetTime &rArr; ProtocolParserWaitFinalResp &rArr; ProtocolParserPlatformData &rArr; intoyunParseReceiveDatapoints &rArr; intoyunSendDatapointAll &rArr; intoyunTransmitData &rArr; ProtocolSendPlatformData &rArr;  ProtocolParserWaitFinalResp (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProtocolQueryNetTime
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> intoyun_interface.o(.constdata)
</UL>
<P><STRONG><a name="[52]"></a>intoyunGetStatus</STRONG> (Thumb, 80 bytes, Stack size 72 bytes, intoyun_datapoint.o(i.intoyunGetStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 1984<LI>Call Chain = intoyunGetStatus &rArr; ProtocolQueryStatus &rArr; ProtocolParserWaitFinalResp &rArr; ProtocolParserPlatformData &rArr; intoyunParseReceiveDatapoints &rArr; intoyunSendDatapointAll &rArr; intoyunTransmitData &rArr; ProtocolSendPlatformData &rArr;  ProtocolParserWaitFinalResp (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_log_print
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProtocolQueryStatus
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> intoyun_interface.o(.constdata)
</UL>
<P><STRONG><a name="[45]"></a>intoyunInit</STRONG> (Thumb, 66 bytes, Stack size 224 bytes, intoyun_datapoint.o(i.intoyunInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 2328<LI>Call Chain = intoyunInit &rArr; delay &rArr; intoyunLoop &rArr; intoyunDeviceRegister &rArr; ProtocolSetupRegister &rArr; ProtocolParserWaitFinalResp &rArr; ProtocolParserPlatformData &rArr; intoyunParseReceiveDatapoints &rArr; intoyunSendDatapointAll &rArr; intoyunTransmitData &rArr; ProtocolSendPlatformData &rArr;  ProtocolParserWaitFinalResp (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intoyunDefineDatapointBool
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SystemInit
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timerGetId
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_log_print
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProtocolQueryInfo
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProtocolParserInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> intoyun_interface.o(.constdata)
</UL>
<P><STRONG><a name="[46]"></a>intoyunLoop</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, intoyun_datapoint.o(i.intoyunLoop))
<BR><BR>[Stack]<UL><LI>Max Depth = 2088<LI>Call Chain = intoyunLoop &rArr; intoyunDeviceRegister &rArr; ProtocolSetupRegister &rArr; ProtocolParserWaitFinalResp &rArr; ProtocolParserPlatformData &rArr; intoyunParseReceiveDatapoints &rArr; intoyunSendDatapointAll &rArr; intoyunTransmitData &rArr; ProtocolSendPlatformData &rArr;  ProtocolParserWaitFinalResp (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intoyunSendDatapointAutomatic
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intoyunConnected
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intoyunDeviceRegister
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProtocolModuleActiveSendHandle
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay
</UL>
<BR>[Address Reference Count : 1]<UL><LI> intoyun_interface.o(.constdata)
</UL>
<P><STRONG><a name="[bc]"></a>intoyunParseReceiveDatapoints</STRONG> (Thumb, 592 bytes, Stack size 48 bytes, intoyun_datapoint.o(i.intoyunParseReceiveDatapoints))
<BR><BR>[Stack]<UL><LI>Max Depth = 1232<LI>Call Chain = intoyunParseReceiveDatapoints &rArr; intoyunSendDatapointAll &rArr; intoyunTransmitData &rArr; ProtocolSendPlatformData &rArr;  ProtocolParserWaitFinalResp (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intoyunReadDatapointBool
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intoyunSendDatapointAll
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intoyunPlatformWriteDatapointString
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intoyunPlatformWriteDatapointNumberInt32
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intoyunPlatformWriteDatapointNumberDouble
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intoyunPlatformWriteDatapointEnum
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intoyunPlatformWriteDatapointBool
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intoyunPlatformWriteDatapointBinary
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intoyunDiscoverProperty
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pow
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_log_print_dump
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_log_print
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProtocolParserPlatformData
</UL>

<P><STRONG><a name="[50]"></a>intoyunPutPipe</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, intoyun_datapoint.o(i.intoyunPutPipe))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = intoyunPutPipe &rArr; ProtocolPutPipe
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProtocolPutPipe
</UL>
<BR>[Address Reference Count : 1]<UL><LI> intoyun_interface.o(.constdata)
</UL>
<P><STRONG><a name="[61]"></a>intoyunReadDatapointBinary</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, intoyun_datapoint.o(i.intoyunReadDatapointBinary))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = intoyunReadDatapointBinary &rArr; intoyunDiscoverProperty
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intoyunDiscoverProperty
</UL>
<BR>[Address Reference Count : 1]<UL><LI> intoyun_interface.o(.constdata)
</UL>
<P><STRONG><a name="[5c]"></a>intoyunReadDatapointBool</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, intoyun_datapoint.o(i.intoyunReadDatapointBool))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = intoyunReadDatapointBool &rArr; intoyunDiscoverProperty
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intoyunDiscoverProperty
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intoyunParseReceiveDatapoints
</UL>
<BR>[Address Reference Count : 1]<UL><LI> intoyun_interface.o(.constdata)
</UL>
<P><STRONG><a name="[5f]"></a>intoyunReadDatapointEnum</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, intoyun_datapoint.o(i.intoyunReadDatapointEnum))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = intoyunReadDatapointEnum &rArr; intoyunDiscoverProperty
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intoyunDiscoverProperty
</UL>
<BR>[Address Reference Count : 1]<UL><LI> intoyun_interface.o(.constdata)
</UL>
<P><STRONG><a name="[5e]"></a>intoyunReadDatapointNumberDouble</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, intoyun_datapoint.o(i.intoyunReadDatapointNumberDouble))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = intoyunReadDatapointNumberDouble &rArr; intoyunDiscoverProperty
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intoyunDiscoverProperty
</UL>
<BR>[Address Reference Count : 1]<UL><LI> intoyun_interface.o(.constdata)
</UL>
<P><STRONG><a name="[5d]"></a>intoyunReadDatapointNumberInt32</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, intoyun_datapoint.o(i.intoyunReadDatapointNumberInt32))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = intoyunReadDatapointNumberInt32 &rArr; intoyunDiscoverProperty
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intoyunDiscoverProperty
</UL>
<BR>[Address Reference Count : 1]<UL><LI> intoyun_interface.o(.constdata)
</UL>
<P><STRONG><a name="[60]"></a>intoyunReadDatapointString</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, intoyun_datapoint.o(i.intoyunReadDatapointString))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = intoyunReadDatapointString &rArr; intoyunDiscoverProperty
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intoyunDiscoverProperty
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> intoyun_interface.o(.constdata)
</UL>
<P><STRONG><a name="[6e]"></a>intoyunSendAllDatapointManual</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, intoyun_datapoint.o(i.intoyunSendAllDatapointManual))
<BR><BR>[Stack]<UL><LI>Max Depth = 1192<LI>Call Chain = intoyunSendAllDatapointManual &rArr; intoyunSendDatapointAll &rArr; intoyunTransmitData &rArr; ProtocolSendPlatformData &rArr;  ProtocolParserWaitFinalResp (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intoyunSendDatapointAll
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intoyunPropertyChangeClear
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intoyunGetPropertyPermissionUpCount
</UL>
<BR>[Address Reference Count : 1]<UL><LI> intoyun_interface.o(.constdata)
</UL>
<P><STRONG><a name="[6f]"></a>intoyunSendCustomData</STRONG> (Thumb, 48 bytes, Stack size 264 bytes, intoyun_datapoint.o(i.intoyunSendCustomData))
<BR><BR>[Stack]<UL><LI>Max Depth = 904<LI>Call Chain = intoyunSendCustomData &rArr; intoyunTransmitData &rArr; ProtocolSendPlatformData &rArr;  ProtocolParserWaitFinalResp (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intoyunTransmitData
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> intoyun_interface.o(.constdata)
</UL>
<P><STRONG><a name="[e7]"></a>intoyunSendDatapointAutomatic</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, intoyun_datapoint.o(i.intoyunSendDatapointAutomatic))
<BR><BR>[Stack]<UL><LI>Max Depth = 1200<LI>Call Chain = intoyunSendDatapointAutomatic &rArr; intoyunSendDatapointAll &rArr; intoyunTransmitData &rArr; ProtocolSendPlatformData &rArr;  ProtocolParserWaitFinalResp (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intoyunSendDatapointAll
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intoyunPropertyChangeClear
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intoyunGetPropertyPermissionUpCount
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;millis
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intoyunLoop
</UL>

<P><STRONG><a name="[6d]"></a>intoyunSendDatapointBinary</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, intoyun_datapoint.o(i.intoyunSendDatapointBinary))
<BR><BR>[Stack]<UL><LI>Max Depth = 936<LI>Call Chain = intoyunSendDatapointBinary &rArr; intoyunSendSingleDatapoint &rArr; intoyunTransmitData &rArr; ProtocolSendPlatformData &rArr;  ProtocolParserWaitFinalResp (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intoyunSendSingleDatapoint
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intoyunPlatformWriteDatapointBinary
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intoyunDiscoverProperty
</UL>
<BR>[Address Reference Count : 1]<UL><LI> intoyun_interface.o(.constdata)
</UL>
<P><STRONG><a name="[68]"></a>intoyunSendDatapointBool</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, intoyun_datapoint.o(i.intoyunSendDatapointBool))
<BR><BR>[Stack]<UL><LI>Max Depth = 928<LI>Call Chain = intoyunSendDatapointBool &rArr; intoyunSendSingleDatapoint &rArr; intoyunTransmitData &rArr; ProtocolSendPlatformData &rArr;  ProtocolParserWaitFinalResp (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intoyunSendSingleDatapoint
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intoyunPlatformWriteDatapointBool
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intoyunDiscoverProperty
</UL>
<BR>[Address Reference Count : 1]<UL><LI> intoyun_interface.o(.constdata)
</UL>
<P><STRONG><a name="[6b]"></a>intoyunSendDatapointEnum</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, intoyun_datapoint.o(i.intoyunSendDatapointEnum))
<BR><BR>[Stack]<UL><LI>Max Depth = 928<LI>Call Chain = intoyunSendDatapointEnum &rArr; intoyunSendSingleDatapoint &rArr; intoyunTransmitData &rArr; ProtocolSendPlatformData &rArr;  ProtocolParserWaitFinalResp (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intoyunSendSingleDatapoint
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intoyunPlatformWriteDatapointEnum
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intoyunDiscoverProperty
</UL>
<BR>[Address Reference Count : 1]<UL><LI> intoyun_interface.o(.constdata)
</UL>
<P><STRONG><a name="[6a]"></a>intoyunSendDatapointNumberDouble</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, intoyun_datapoint.o(i.intoyunSendDatapointNumberDouble))
<BR><BR>[Stack]<UL><LI>Max Depth = 936<LI>Call Chain = intoyunSendDatapointNumberDouble &rArr; intoyunSendSingleDatapoint &rArr; intoyunTransmitData &rArr; ProtocolSendPlatformData &rArr;  ProtocolParserWaitFinalResp (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intoyunSendSingleDatapoint
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intoyunPlatformWriteDatapointNumberDouble
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intoyunDiscoverProperty
</UL>
<BR>[Address Reference Count : 1]<UL><LI> intoyun_interface.o(.constdata)
</UL>
<P><STRONG><a name="[69]"></a>intoyunSendDatapointNumberInt32</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, intoyun_datapoint.o(i.intoyunSendDatapointNumberInt32))
<BR><BR>[Stack]<UL><LI>Max Depth = 928<LI>Call Chain = intoyunSendDatapointNumberInt32 &rArr; intoyunSendSingleDatapoint &rArr; intoyunTransmitData &rArr; ProtocolSendPlatformData &rArr;  ProtocolParserWaitFinalResp (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intoyunSendSingleDatapoint
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intoyunPlatformWriteDatapointNumberInt32
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intoyunDiscoverProperty
</UL>
<BR>[Address Reference Count : 1]<UL><LI> intoyun_interface.o(.constdata)
</UL>
<P><STRONG><a name="[6c]"></a>intoyunSendDatapointString</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, intoyun_datapoint.o(i.intoyunSendDatapointString))
<BR><BR>[Stack]<UL><LI>Max Depth = 928<LI>Call Chain = intoyunSendDatapointString &rArr; intoyunSendSingleDatapoint &rArr; intoyunTransmitData &rArr; ProtocolSendPlatformData &rArr;  ProtocolParserWaitFinalResp (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intoyunSendSingleDatapoint
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intoyunPlatformWriteDatapointString
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intoyunDiscoverProperty
</UL>
<BR>[Address Reference Count : 1]<UL><LI> intoyun_interface.o(.constdata)
</UL>
<P><STRONG><a name="[4b]"></a>intoyunSetDevice</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, intoyun_datapoint.o(i.intoyunSetDevice))
<BR><BR>[Stack]<UL><LI>Max Depth = 1936<LI>Call Chain = intoyunSetDevice &rArr; ProtocolSetupDevice &rArr; ProtocolParserWaitFinalResp &rArr; ProtocolParserPlatformData &rArr; intoyunParseReceiveDatapoints &rArr; intoyunSendDatapointAll &rArr; intoyunTransmitData &rArr; ProtocolSendPlatformData &rArr;  ProtocolParserWaitFinalResp (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_log_print
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProtocolSetupDevice
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> intoyun_interface.o(.constdata)
</UL>
<P><STRONG><a name="[47]"></a>intoyunSetEventCallback</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, intoyun_datapoint.o(i.intoyunSetEventCallback))
<BR>[Address Reference Count : 1]<UL><LI> intoyun_interface.o(.constdata)
</UL>
<P><STRONG><a name="[48]"></a>intoyunSetMode</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, intoyun_datapoint.o(i.intoyunSetMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 1920<LI>Call Chain = intoyunSetMode &rArr; ProtocolSetupMode &rArr; ProtocolParserWaitFinalResp &rArr; ProtocolParserPlatformData &rArr; intoyunParseReceiveDatapoints &rArr; intoyunSendDatapointAll &rArr; intoyunTransmitData &rArr; ProtocolSendPlatformData &rArr;  ProtocolParserWaitFinalResp (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProtocolSetupMode
</UL>
<BR>[Address Reference Count : 1]<UL><LI> intoyun_interface.o(.constdata)
</UL>
<P><STRONG><a name="[67]"></a>intoyunWriteDatapointBinary</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, intoyun_datapoint.o(i.intoyunWriteDatapointBinary))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = intoyunWriteDatapointBinary &rArr; intoyunPlatformWriteDatapointBinary &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intoyunPlatformWriteDatapointBinary
</UL>
<BR>[Address Reference Count : 1]<UL><LI> intoyun_interface.o(.constdata)
</UL>
<P><STRONG><a name="[62]"></a>intoyunWriteDatapointBool</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, intoyun_datapoint.o(i.intoyunWriteDatapointBool))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = intoyunWriteDatapointBool &rArr; intoyunPlatformWriteDatapointBool &rArr; intoyunDiscoverProperty
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intoyunPlatformWriteDatapointBool
</UL>
<BR>[Address Reference Count : 1]<UL><LI> intoyun_interface.o(.constdata)
</UL>
<P><STRONG><a name="[65]"></a>intoyunWriteDatapointEnum</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, intoyun_datapoint.o(i.intoyunWriteDatapointEnum))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = intoyunWriteDatapointEnum &rArr; intoyunPlatformWriteDatapointEnum &rArr; intoyunDiscoverProperty
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intoyunPlatformWriteDatapointEnum
</UL>
<BR>[Address Reference Count : 1]<UL><LI> intoyun_interface.o(.constdata)
</UL>
<P><STRONG><a name="[64]"></a>intoyunWriteDatapointNumberDouble</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, intoyun_datapoint.o(i.intoyunWriteDatapointNumberDouble))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = intoyunWriteDatapointNumberDouble &rArr; intoyunPlatformWriteDatapointNumberDouble &rArr; _pow &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intoyunPlatformWriteDatapointNumberDouble
</UL>
<BR>[Address Reference Count : 1]<UL><LI> intoyun_interface.o(.constdata)
</UL>
<P><STRONG><a name="[63]"></a>intoyunWriteDatapointNumberInt32</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, intoyun_datapoint.o(i.intoyunWriteDatapointNumberInt32))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = intoyunWriteDatapointNumberInt32 &rArr; intoyunPlatformWriteDatapointNumberInt32 &rArr; __aeabi_i2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intoyunPlatformWriteDatapointNumberInt32
</UL>
<BR>[Address Reference Count : 1]<UL><LI> intoyun_interface.o(.constdata)
</UL>
<P><STRONG><a name="[66]"></a>intoyunWriteDatapointString</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, intoyun_datapoint.o(i.intoyunWriteDatapointString))
<BR><BR>[Stack]<UL><LI>Max Depth = 664<LI>Call Chain = intoyunWriteDatapointString &rArr; intoyunPlatformWriteDatapointString &rArr; _log_print &rArr; HAL_Print &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intoyunPlatformWriteDatapointString
</UL>
<BR>[Address Reference Count : 1]<UL><LI> intoyun_interface.o(.constdata)
</UL>
<P><STRONG><a name="[35]"></a>main</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 2144<LI>Call Chain = main &rArr; userInit &rArr; delay &rArr; intoyunLoop &rArr; intoyunDeviceRegister &rArr; ProtocolSetupRegister &rArr; ProtocolParserWaitFinalResp &rArr; ProtocolParserPlatformData &rArr; intoyunParseReceiveDatapoints &rArr; intoyunSendDatapointAll &rArr; intoyunTransmitData &rArr; ProtocolSendPlatformData &rArr;  ProtocolParserWaitFinalResp (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;userInit
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;userHandle
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[b9]"></a>malloc</STRONG> (Thumb, 92 bytes, Stack size 20 bytes, malloc.o(i.malloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intoyunParseReceiveDatapoints
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intoyunDefineDatapointString
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intoyunDefineDatapointBinary
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intoyunPlatformWriteDatapointString
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intoyunPlatformWriteDatapointBinary
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intoyunDatapointValueInit
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProtocolParserInit
</UL>

<P><STRONG><a name="[f9]"></a>md5_add</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, intoyun_md5.o(i.md5_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = md5_add &rArr; MD5Update &rArr; MD5Transform
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MD5Update
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md5_output
</UL>

<P><STRONG><a name="[fa]"></a>md5_begin</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, intoyun_md5.o(i.md5_begin))
<BR><BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MD5Init
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md5_output
</UL>

<P><STRONG><a name="[fc]"></a>md5_calculate</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, intoyun_md5.o(i.md5_calculate))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = md5_calculate &rArr; MD5Final &rArr; MD5Transform
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MD5Final
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md5_output
</UL>

<P><STRONG><a name="[e5]"></a>md5_output</STRONG> (Thumb, 88 bytes, Stack size 56 bytes, intoyun_md5.o(i.md5_output))
<BR><BR>[Stack]<UL><LI>Max Depth = 688<LI>Call Chain = md5_output &rArr; _log_print &rArr; HAL_Print &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md5_calculate
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md5_begin
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md5_add
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_log_print_dump
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_log_print
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intoyunDeviceRegister
</UL>

<P><STRONG><a name="[bf]"></a>millis</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, intoyun_interface.o(i.millis))
<BR><BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Millis
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intoyunSendDatapointAutomatic
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intoyunSendSingleDatapoint
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProtocolParserWaitFinalResp
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_log_print
</UL>

<P><STRONG><a name="[44]"></a>system_event_callback</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, main.o(i.system_event_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = system_event_callback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.userInit)
</UL>
<P><STRONG><a name="[e4]"></a>timerGetId</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, intoyun_interface.o(i.timerGetId))
<BR><BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Millis
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intoyunInit
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intoyunDeviceRegister
</UL>

<P><STRONG><a name="[e3]"></a>timerIsEnd</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, intoyun_interface.o(i.timerIsEnd))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = timerIsEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Millis
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intoyunDeviceRegister
</UL>

<P><STRONG><a name="[f8]"></a>userHandle</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, main.o(i.userHandle))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = userHandle
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[f7]"></a>userInit</STRONG> (Thumb, 156 bytes, Stack size 40 bytes, main.o(i.userInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 2144<LI>Call Chain = userInit &rArr; delay &rArr; intoyunLoop &rArr; intoyunDeviceRegister &rArr; ProtocolSetupRegister &rArr; ProtocolParserWaitFinalResp &rArr; ProtocolParserPlatformData &rArr; intoyunParseReceiveDatapoints &rArr; intoyunSendDatapointAll &rArr; intoyunTransmitData &rArr; ProtocolSendPlatformData &rArr;  ProtocolParserWaitFinalResp (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[9c]"></a>SystemClockConfig</STRONG> (Thumb, 100 bytes, Stack size 72 bytes, hal_interface.o(i.SystemClockConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = SystemClockConfig &rArr; HAL_RCC_ClockConfig &rArr; HAL_RCC_GetSysClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SystemInit
</UL>

<P><STRONG><a name="[d8]"></a>_pow</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, intoyun_datapoint.o(i._pow))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = _pow &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intoyunParseReceiveDatapoints
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intoyunPlatformWriteDatapointNumberDouble
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intoyunFormDataPointBinary
</UL>

<P><STRONG><a name="[dd]"></a>intoyunDatapointValueInit</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, intoyun_datapoint.o(i.intoyunDatapointValueInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = intoyunDatapointValueInit &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intoyunDefineDatapointString
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intoyunDefineDatapointNumber
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intoyunDefineDatapointEnum
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intoyunDefineDatapointBool
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intoyunDefineDatapointBinary
</UL>

<P><STRONG><a name="[e2]"></a>intoyunDeviceRegister</STRONG> (Thumb, 188 bytes, Stack size 168 bytes, intoyun_datapoint.o(i.intoyunDeviceRegister))
<BR><BR>[Stack]<UL><LI>Max Depth = 2080<LI>Call Chain = intoyunDeviceRegister &rArr; ProtocolSetupRegister &rArr; ProtocolParserWaitFinalResp &rArr; ProtocolParserPlatformData &rArr; intoyunParseReceiveDatapoints &rArr; intoyunSendDatapointAll &rArr; intoyunTransmitData &rArr; ProtocolSendPlatformData &rArr;  ProtocolParserWaitFinalResp (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timerIsEnd
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timerGetId
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md5_output
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_log_print
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProtocolSetupRegister
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProtocolQueryNetTime
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intoyunLoop
</UL>

<P><STRONG><a name="[de]"></a>intoyunDiscoverProperty</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, intoyun_datapoint.o(i.intoyunDiscoverProperty))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = intoyunDiscoverProperty
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intoyunSendDatapointString
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intoyunSendDatapointNumberInt32
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intoyunSendDatapointNumberDouble
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intoyunSendDatapointEnum
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intoyunSendDatapointBool
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intoyunSendDatapointBinary
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intoyunReadDatapointString
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intoyunReadDatapointNumberInt32
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intoyunReadDatapointNumberDouble
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intoyunReadDatapointEnum
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intoyunReadDatapointBool
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intoyunReadDatapointBinary
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intoyunParseReceiveDatapoints
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intoyunDefineDatapointString
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intoyunDefineDatapointNumber
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intoyunDefineDatapointEnum
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intoyunDefineDatapointBool
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intoyunDefineDatapointBinary
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intoyunPlatformWriteDatapointString
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intoyunPlatformWriteDatapointNumberInt32
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intoyunPlatformWriteDatapointNumberDouble
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intoyunPlatformWriteDatapointEnum
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intoyunPlatformWriteDatapointBool
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intoyunPlatformWriteDatapointBinary
</UL>

<P><STRONG><a name="[e6]"></a>intoyunFormDataPointBinary</STRONG> (Thumb, 314 bytes, Stack size 40 bytes, intoyun_datapoint.o(i.intoyunFormDataPointBinary))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = intoyunFormDataPointBinary &rArr; _pow &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pow
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intoyunSendSingleDatapoint
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intoyunSendDatapointAll
</UL>

<P><STRONG><a name="[f3]"></a>intoyunGetPropertyPermissionUpCount</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, intoyun_datapoint.o(i.intoyunGetPropertyPermissionUpCount))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = intoyunGetPropertyPermissionUpCount
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intoyunSendDatapointAutomatic
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intoyunSendAllDatapointManual
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intoyunSendDatapointAll
</UL>

<P><STRONG><a name="[ee]"></a>intoyunPlatformWriteDatapointBinary</STRONG> (Thumb, 152 bytes, Stack size 24 bytes, intoyun_datapoint.o(i.intoyunPlatformWriteDatapointBinary))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = intoyunPlatformWriteDatapointBinary &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intoyunDiscoverProperty
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intoyunWriteDatapointBinary
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intoyunSendDatapointBinary
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intoyunParseReceiveDatapoints
</UL>

<P><STRONG><a name="[e8]"></a>intoyunPlatformWriteDatapointBool</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, intoyun_datapoint.o(i.intoyunPlatformWriteDatapointBool))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = intoyunPlatformWriteDatapointBool &rArr; intoyunDiscoverProperty
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intoyunDiscoverProperty
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intoyunSendDatapointBool
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intoyunParseReceiveDatapoints
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intoyunWriteDatapointBool
</UL>

<P><STRONG><a name="[eb]"></a>intoyunPlatformWriteDatapointEnum</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, intoyun_datapoint.o(i.intoyunPlatformWriteDatapointEnum))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = intoyunPlatformWriteDatapointEnum &rArr; intoyunDiscoverProperty
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intoyunDiscoverProperty
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intoyunSendDatapointEnum
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intoyunParseReceiveDatapoints
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intoyunWriteDatapointEnum
</UL>

<P><STRONG><a name="[e9]"></a>intoyunPlatformWriteDatapointNumberDouble</STRONG> (Thumb, 238 bytes, Stack size 40 bytes, intoyun_datapoint.o(i.intoyunPlatformWriteDatapointNumberDouble))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = intoyunPlatformWriteDatapointNumberDouble &rArr; _pow &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intoyunDiscoverProperty
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pow
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmpeq
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intoyunSendDatapointNumberDouble
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intoyunParseReceiveDatapoints
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intoyunWriteDatapointNumberDouble
</UL>

<P><STRONG><a name="[ea]"></a>intoyunPlatformWriteDatapointNumberInt32</STRONG> (Thumb, 172 bytes, Stack size 40 bytes, intoyun_datapoint.o(i.intoyunPlatformWriteDatapointNumberInt32))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = intoyunPlatformWriteDatapointNumberInt32 &rArr; __aeabi_i2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intoyunDiscoverProperty
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intoyunSendDatapointNumberInt32
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intoyunParseReceiveDatapoints
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intoyunWriteDatapointNumberInt32
</UL>

<P><STRONG><a name="[ec]"></a>intoyunPlatformWriteDatapointString</STRONG> (Thumb, 208 bytes, Stack size 32 bytes, intoyun_datapoint.o(i.intoyunPlatformWriteDatapointString))
<BR><BR>[Stack]<UL><LI>Max Depth = 664<LI>Call Chain = intoyunPlatformWriteDatapointString &rArr; _log_print &rArr; HAL_Print &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intoyunDiscoverProperty
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_log_print
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intoyunSendDatapointString
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intoyunParseReceiveDatapoints
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intoyunWriteDatapointString
</UL>

<P><STRONG><a name="[f4]"></a>intoyunPropertyChangeClear</STRONG> (Thumb, 34 bytes, Stack size 12 bytes, intoyun_datapoint.o(i.intoyunPropertyChangeClear))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = intoyunPropertyChangeClear
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intoyunSendDatapointAutomatic
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intoyunSendAllDatapointManual
</UL>

<P><STRONG><a name="[ef]"></a>intoyunSendDatapointAll</STRONG> (Thumb, 130 bytes, Stack size 544 bytes, intoyun_datapoint.o(i.intoyunSendDatapointAll))
<BR><BR>[Stack]<UL><LI>Max Depth = 1184<LI>Call Chain = intoyunSendDatapointAll &rArr; intoyunTransmitData &rArr; ProtocolSendPlatformData &rArr;  ProtocolParserWaitFinalResp (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intoyunTransmitData
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intoyunGetPropertyPermissionUpCount
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intoyunFormDataPointBinary
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_log_print_dump
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_log_print
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intoyunSendDatapointAutomatic
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intoyunSendAllDatapointManual
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intoyunParseReceiveDatapoints
</UL>

<P><STRONG><a name="[f6]"></a>intoyunSendSingleDatapoint</STRONG> (Thumb, 74 bytes, Stack size 272 bytes, intoyun_datapoint.o(i.intoyunSendSingleDatapoint))
<BR><BR>[Stack]<UL><LI>Max Depth = 912<LI>Call Chain = intoyunSendSingleDatapoint &rArr; intoyunTransmitData &rArr; ProtocolSendPlatformData &rArr;  ProtocolParserWaitFinalResp (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intoyunTransmitData
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intoyunFormDataPointBinary
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;millis
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intoyunSendDatapointString
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intoyunSendDatapointNumberInt32
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intoyunSendDatapointNumberDouble
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intoyunSendDatapointEnum
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intoyunSendDatapointBool
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intoyunSendDatapointBinary
</UL>

<P><STRONG><a name="[f5]"></a>intoyunTransmitData</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, intoyun_datapoint.o(i.intoyunTransmitData))
<BR><BR>[Stack]<UL><LI>Max Depth = 640<LI>Call Chain = intoyunTransmitData &rArr; ProtocolSendPlatformData &rArr;  ProtocolParserWaitFinalResp (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProtocolSendPlatformData
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intoyunSendCustomData
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intoyunSendSingleDatapoint
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intoyunSendDatapointAll
</UL>

<P><STRONG><a name="[a6]"></a>MD5Transform</STRONG> (Thumb, 1756 bytes, Stack size 132 bytes, intoyun_md5.o(i.MD5Transform))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = MD5Transform
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MD5Update
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MD5Final
</UL>

<P><STRONG><a name="[b6]"></a>PipeFree</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, intoyun_protocol.o(i.PipeFree))
<BR><BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProtocolParserGetOnePacket
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProtocolPutPipe
</UL>

<P><STRONG><a name="[aa]"></a>PipeGet</STRONG> (Thumb, 96 bytes, Stack size 32 bytes, intoyun_protocol.o(i.PipeGet))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = PipeGet
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PipeSize
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PipeInc
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProtocolParserGetOnePacket
</UL>

<P><STRONG><a name="[ac]"></a>PipeInc</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, intoyun_protocol.o(i.PipeInc))
<BR><BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PipeSet
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PipeNext
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PipeGet
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProtocolPutPipe
</UL>

<P><STRONG><a name="[ad]"></a>PipeNext</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, intoyun_protocol.o(i.PipeNext))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = PipeNext
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PipeInc
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProtocolParserMatch
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProtocolParserFormated
</UL>

<P><STRONG><a name="[ae]"></a>PipeSet</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, intoyun_protocol.o(i.PipeSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = PipeSet
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PipeSize
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PipeInc
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProtocolParserGetOnePacket
</UL>

<P><STRONG><a name="[ab]"></a>PipeSize</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, intoyun_protocol.o(i.PipeSize))
<BR><BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProtocolParserGetOnePacket
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PipeSet
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PipeGet
</UL>

<P><STRONG><a name="[b4]"></a>ProtocolParserFormated</STRONG> (Thumb, 212 bytes, Stack size 32 bytes, intoyun_protocol.o(i.ProtocolParserFormated))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ProtocolParserFormated &rArr; PipeNext
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PipeNext
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProtocolParserGetOnePacket
</UL>

<P><STRONG><a name="[b5]"></a>ProtocolParserGetOnePacket</STRONG> (Thumb, 216 bytes, Stack size 48 bytes, intoyun_protocol.o(i.ProtocolParserGetOnePacket))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = ProtocolParserGetOnePacket &rArr; ProtocolParserMatch &rArr; PipeNext
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProtocolParserMatch
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProtocolParserFormated
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PipeSize
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PipeSet
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PipeGet
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PipeFree
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProtocolParserWaitFinalResp
</UL>

<P><STRONG><a name="[b7]"></a>ProtocolParserMatch</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, intoyun_protocol.o(i.ProtocolParserMatch))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ProtocolParserMatch &rArr; PipeNext
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PipeNext
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProtocolParserGetOnePacket
</UL>

<P><STRONG><a name="[b0]"></a>ProtocolParserSendFormated</STRONG> (Thumb, 50 bytes, Stack size 536 bytes, intoyun_protocol.o(i.ProtocolParserSendFormated))
<BR><BR>[Stack]<UL><LI>Max Depth = 624<LI>Call Chain = ProtocolParserSendFormated &rArr; SerialPipePut &rArr; HAL_UartWrite &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SerialPipePut
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsnprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProtocolSetupRegister
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProtocolSetupMode
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProtocolSetupJoin
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProtocolSetupDevice
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProtocolSendPlatformData
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProtocolQueryStatus
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProtocolQueryNetTime
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProtocolQueryMode
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProtocolQueryInfo
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProtocolQueryDevice
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProtocolParserInit
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProtocolExecuteRestore
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProtocolExecuteRestart
</UL>

<P><STRONG><a name="[b1]"></a>ProtocolParserWaitFinalResp</STRONG> (Thumb, 504 bytes, Stack size 664 bytes, intoyun_protocol.o(i.ProtocolParserWaitFinalResp))
<BR><BR>[Stack]<UL><LI>Max Depth = 1904<LI>Call Chain = ProtocolParserWaitFinalResp &rArr; ProtocolParserPlatformData &rArr; intoyunParseReceiveDatapoints &rArr; intoyunSendDatapointAll &rArr; intoyunTransmitData &rArr; ProtocolSendPlatformData &rArr;  ProtocolParserWaitFinalResp (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProtocolParserPlatformData
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProtocolParserGetOnePacket
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;millis
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_log_print
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sscanf
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProtocolSetupRegister
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProtocolSetupMode
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProtocolSetupJoin
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProtocolSetupDevice
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProtocolSendPlatformData
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProtocolQueryStatus
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProtocolQueryNetTime
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProtocolQueryMode
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProtocolQueryInfo
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProtocolQueryDevice
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProtocolParserInit
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProtocolModuleActiveSendHandle
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProtocolExecuteRestore
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProtocolExecuteRestart
</UL>

<P><STRONG><a name="[be]"></a>SerialPipePut</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, intoyun_protocol.o(i.SerialPipePut))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = SerialPipePut &rArr; HAL_UartWrite &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UartWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProtocolParserSendFormated
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProtocolSendPlatformData
</UL>

<P><STRONG><a name="[95]"></a>NVIC_SetPriority</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, stm32f1xx_hal_cortex.o(i.NVIC_SetPriority))
<BR><BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Config
</UL>

<P><STRONG><a name="[9f]"></a>UART_SetConfig</STRONG> (Thumb, 364 bytes, Stack size 24 bytes, stm32f1xx_hal_uart.o(i.UART_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = UART_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK2Freq
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[a3]"></a>UART_WaitOnFlagUntilTimeout</STRONG> (Thumb, 146 bytes, Stack size 32 bytes, stm32f1xx_hal_uart.o(i.UART_WaitOnFlagUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Receive
</UL>

<P><STRONG><a name="[d3]"></a>_fp_digits</STRONG> (Thumb, 366 bytes, Stack size 64 bytes, printfa.o(i._fp_digits), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[d0]"></a>_printf_core</STRONG> (Thumb, 1744 bytes, Stack size 136 bytes, printfa.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0vsnprintf
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0snprintf
</UL>

<P><STRONG><a name="[da]"></a>_printf_post_padding</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, printfa.o(i._printf_post_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[d9]"></a>_printf_pre_padding</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, printfa.o(i._printf_pre_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[42]"></a>_snputc</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, printfa.o(i._snputc))
<BR>[Address Reference Count : 2]<UL><LI> printfa.o(i.__0vsnprintf)
<LI> printfa.o(i.__0snprintf)
</UL>
<P><STRONG><a name="[43]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, printfa.o(i._sputc))
<BR><BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printfa.o(i.__0sprintf)
</UL>
<P><STRONG><a name="[3a]"></a>_scanf_char_input</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, scanf_char.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> scanf_char.o(.text)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
